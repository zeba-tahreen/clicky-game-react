{"version":3,"sources":["components/PictureCard/PictureCard.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["PictureCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","_this","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","_ref","_this2","this","href","components_Wrapper_Wrapper","map","picture","components_PictureCard_PictureCard","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c2efd010.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PictureCard;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport PictureCard from \"./components/PictureCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport cards from \"./cards.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.cards to the cards json array\r\n  state = {\r\n    cards,\r\n    clickedArray: [],\r\n    topScore: 0,\r\n    score: 0,\r\n    message: \"\",\r\n    shakeit: \"false\"\r\n  };\r\n  clickPicture = id => {\r\n    // Arrange the pictures in a random manner\r\n    const shuffledArray = this.shuffleArray(cards);\r\n    this.setState({cards: shuffledArray});\r\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\r\n    if (this.state.clickedArray.includes(id)) {\r\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! Game Over ☹️ Click an image to start again!\", shakeit: \"true\"});\r\n    }\r\n    else {\r\n      this.setState({\r\n        clickedArray: this.state.clickedArray.concat([id]),\r\n        score: this.state.score + 1,\r\n        message: \"Correct!! 🙂\",\r\n        shakeit: \"false\"\r\n      });\r\n    }\r\n    // set topscore = score if score>topscore.\r\n    if (this.state.score >= this.state.topScore) {\r\n      this.setState({ topScore: this.state.score });\r\n    }\r\n    // shake the wrapper if shakeit is set to true\r\n  }\r\n  shuffleArray = (picturesArray) => {\r\n      for (let i = picturesArray.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\r\n      }\r\n      return picturesArray;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n         <nav className=\"nav\">\r\n            <div className=\"nav_logo\">\r\n                <a href=\"https://zeba-tahreen.github.io/Portfolio/\">Zeba</a>\r\n            </div>\r\n            <div className= \"score\">\r\n            <p className = \"score\">Score: {this.state.score} | TopScore: {this.state.topScore}</p>\r\n            </div>\r\n        </nav>\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Welcome <br></br> <strong>Halloween Clicky Game!!</strong></h1>\r\n          <h3 className=\"App-intro\">\r\n          <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \r\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\r\n        </h3>\r\n        </header>\r\n       \r\n        <Wrapper\r\n        shakeWrapper = {this.state.shakeit}\r\n        pictures=\r\n          {this.state.cards.map(picture => (\r\n            <PictureCard\r\n              clickPicture={this.clickPicture}\r\n              id={picture.id}\r\n              key={picture.id} // to get rid of unique key prop warning\r\n              name={picture.name}\r\n              image={picture.image}\r\n            />\r\n          ))}\r\n        />\r\n        <footer className=\"footer\">\r\n      <div className=\"container\">\r\n        <span className=\"text-muted\">&copy; <strong><a href=\"https://github.com/zebat\">Zeba </a></strong> GitHub || 2019 Rutgers Coding Bootcamp</span>\r\n      </div>\r\n    </footer> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}